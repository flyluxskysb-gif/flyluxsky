#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions = ['.tsx', '.ts', '.css', '.js', '.jsx']) {
  let results = [];
  const list = fs.readdirSync(dir);
  
  list.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat && stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .next, .git
      if (!['node_modules', '.next', '.git', 'dist', 'build'].includes(file)) {
        results = results.concat(findFiles(filePath, extensions));
      }
    } else {
      const ext = path.extname(file);
      if (extensions.includes(ext)) {
        results.push(filePath);
      }
    }
  });
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
function checkFontsInFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const issues = [];
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
  const patterns = [
    {
      regex: /font-inter/g,
      type: 'CSS class',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ font-inter –∫–ª–∞—Å—Å–∞'
    },
    {
      regex: /fontFamily.*['"]Inter['"]|['"]Inter['"].*fontFamily/g,
      type: 'Inline style',
      description: 'Inline —Å—Ç–∏–ª—å —Å Inter —à—Ä–∏—Ñ—Ç–æ–º'
    },
    {
      regex: /font-family.*Inter/gi,
      type: 'CSS property',
      description: 'CSS —Å–≤–æ–π—Å—Ç–≤–æ font-family —Å Inter'
    },
    {
      regex: /--font-inter/g,
      type: 'CSS variable',
      description: 'CSS –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è --font-inter'
    },
    {
      regex: /from.*['"]next\/font\/google['"].*Inter/g,
      type: 'Import',
      description: '–ò–º–ø–æ—Ä—Ç Inter —à—Ä–∏—Ñ—Ç–∞'
    }
  ];
  
  const lines = content.split('\n');
  
  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.regex.exec(content)) !== null) {
      // –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
      const beforeMatch = content.substring(0, match.index);
      const lineNumber = beforeMatch.split('\n').length;
      const lineContent = lines[lineNumber - 1];
      
      issues.push({
        file: filePath,
        line: lineNumber,
        type: pattern.type,
        description: pattern.description,
        content: lineContent.trim(),
        match: match[0]
      });
    }
  });
  
  return issues;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function checkAllFonts() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ...');
  console.log('=' .repeat(50));
  
  const srcDir = path.join(process.cwd(), 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('‚ùå –ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    process.exit(1);
  }
  
  const files = findFiles(srcDir);
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
  
  let totalIssues = 0;
  const issuesByType = {};
  
  files.forEach(file => {
    const issues = checkFontsInFile(file);
    
    if (issues.length > 0) {
      totalIssues += issues.length;
      
      console.log(`\nüìÑ ${path.relative(process.cwd(), file)}:`);
      
      issues.forEach(issue => {
        console.log(`  ‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.description}`);
        console.log(`     –¢–∏–ø: ${issue.type}`);
        console.log(`     –ù–∞–π–¥–µ–Ω–æ: ${issue.match}`);
        console.log(`     –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${issue.content}`);
        
        // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
        if (!issuesByType[issue.type]) {
          issuesByType[issue.type] = 0;
        }
        issuesByType[issue.type]++;
      });
    }
  });
  
  console.log('\n' + '=' .repeat(50));
  console.log('üìä –°–í–û–î–ö–ê:');
  
  if (totalIssues === 0) {
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —à—Ä–∏—Ñ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í–µ–∑–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Poppins.');
  } else {
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º —Å —à—Ä–∏—Ñ—Ç–∞–º–∏:`);
    
    Object.entries(issuesByType).forEach(([type, count]) => {
      console.log(`   ‚Ä¢ ${type}: ${count}`);
    });
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ font-inter –Ω–∞ font-poppins');
    console.log('   2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ fontFamily: "Inter" –Ω–∞ fontFamily: "Poppins"');
    console.log('   3. –û–±–Ω–æ–≤–∏—Ç–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–º–ø–æ—Ä—Ç—ã');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –≤ globals.css');
  }
  
  console.log('\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('   –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç Poppins');
  console.log('   –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–ª–∞—Å—Å—ã: font-poppins, font-ubuntu');
  console.log('   –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ: font-inter, –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Inter');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkAllFonts();
}

module.exports = { checkAllFonts, findFiles, checkFontsInFile };